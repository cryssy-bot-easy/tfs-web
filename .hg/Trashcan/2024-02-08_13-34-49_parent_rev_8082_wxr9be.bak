diff --git a/grails-app/controllers/com/ucpb/tfsweb/lc/dataentry/LcDataEntryAdjustmentController.groovy b/grails-app/controllers/com/ucpb/tfsweb/lc/dataentry/LcDataEntryAdjustmentController.groovy
deleted file mode 100644
--- a/grails-app/controllers/com/ucpb/tfsweb/lc/dataentry/LcDataEntryAdjustmentController.groovy
+++ /dev/null
@@ -1,463 +0,0 @@
-package com.ucpb.tfsweb.lc.dataentry
-
-import grails.converters.JSON
-import java.text.DecimalFormat
-import org.springframework.web.multipart.MultipartHttpServletRequest
-import org.springframework.web.multipart.MultipartFile
-
-class LcDataEntryAdjustmentController {
-
-    def headerService
-    def dataEntryService
-	def parserService
-
-    def routingInformationService
-
-    def documentUploadingService
-
-    def tabUtilityService
-	def facilityService
-	
-	def foreignExchangeService
-	def ratesService
-	def coreAPIService
-
-	//for AMLA
-	def chargesPaymentService
-	
-    // sets service type
-    protected String REFERENCE_TYPE = "DATA_ENTRY"
-    protected String SERVICE_TYPE = "Adjustment"
-    protected String DOCUMENT_CLASS = "LC"
-
-    // render page
-	def viewAdjustment() {
-		if(chainModel) {
-			session.dataEntryModel = chainModel
-		}
-		
-		if(session.dataEntryModel.transactionSequenceNumber){
-			def facility = facilityService.getFacilityBalanceRequest(new Long(session.dataEntryModel.transactionSequenceNumber), session.dataEntryModel.serviceInstructionId)
-			println "facility: " + facility
-			
-			while (facility.status.equals("pending")){
-				facility = facilityService.getFacilityBalanceRequest(new Long(session.dataEntryModel.transactionSequenceNumber), session.dataEntryModel.serviceInstructionId)
-			}
-			if (facility.status.equals("success")){
-				session.dataEntryModel << [isOverAvailed : !facility.isBalanceSufficient]
-				if (!facility.isBalanceSufficient){
-					def overAvailment
-					if(facility.hasCramApproval){
-						overAvailment = "There is an over-availment in facility. Facility balance is: <br/>PHP " + new DecimalFormat("#,##0.00").format(new BigDecimal(facility.balance)) + "."
-					} else {
-						overAvailment = "Facility balance is insufficient. Current balance is: PHP " + new DecimalFormat("#,##0.00").format(new BigDecimal(facility.balance)) + "."
-					}
-					session.dataEntryModel << [overAvailment : overAvailment]
-				}
-			}
-		}
-		
-		//go to unacted if cancelled from basic details tab
-		if(session.cancelBd){
-			 session.removeAttribute("cancelBd")
-			 render(view:"/main/unacted_transaction")
-		}
-		else if(session.dataEntryModel) {
-			render(view: "/lc/dataentry/opening/index", model:chainModel ? chainModel : session.dataEntryModel)
-			
-			//for standby adjustment
-			def exchange = foreignExchangeService.extractRatesByBaseCurrency(ratesService.getRatesByBaseCurrency().display, chainModel)
-			session.dataEntryModel << [exchange:exchange]
-
-			def urrrates = foreignExchangeService.formatUrrRates(ratesService.getRatesUrr().display, chainModel)
-			session.dataEntryModel << [urrrates:urrrates]
-		}else{
-			render(view: "/main/unauthorized")
-		}
-	}
-
-	// trigger viewing of page
-	def viewAdjustmentDataEntry() {
-        // get lc class and type
-        String documentType = params.documentType
-        String documentSubType1 = params.documentSubType1.toUpperCase()
-        String documentSubType2 = params.documentSubType2
-        session.etsPopup = "false"
-
-        // construct header title
-        String headerTitle = headerService.getDataEntryTitle(documentType, DOCUMENT_CLASS, documentSubType1, SERVICE_TYPE, documentSubType2)
-
-        // keep session model
-        session.dataEntryModel = [documentType: documentType, documentClass: DOCUMENT_CLASS, documentSubType1: documentSubType1, title: headerTitle, serviceType: SERVICE_TYPE, referenceType: REFERENCE_TYPE]
-
-        if (params.tradeServiceId) {
-            Map<String, Object> dataEntryMap = dataEntryService.getDataEntry(params.tradeServiceId)
-
-            dataEntryMap.each {
-                if(!it.key.equals("referenceType") && !it.key.equals("serviceType") && !it.key.equals("documentClass")) {
-                    session.dataEntryModel << it
-                }
-            }
-        }
-
-        // todo: refactor, this should be in a service or something
-        // todo: we are still using etsModel so we don't have to do an if in the instructions and routing tab
-        def documentServiceRoute = routingInformationService.getNextMainApprover(DOCUMENT_CLASS, documentType, documentSubType1, documentSubType2, REFERENCE_TYPE.toUpperCase(), SERVICE_TYPE?.toUpperCase(), session.username, session.userrole.id, session.unitcode, session.dataEntryModel, session.userLevel)
-        session.nextRoute = documentServiceRoute
-        session.dataEntryModel << routingInformationService.getMainApprovalMode(DOCUMENT_CLASS, documentType, documentSubType1, documentSubType2,SERVICE_TYPE?.toUpperCase(), session.dataEntryModel.approvers)
-
-        session.removeAttribute("financial")
-        session.removeAttribute("postApprovalRequirement")
-        session.removeAttribute("amountToCheck")
-        session.removeAttribute("signingLimit")
-        session.removeAttribute("postingAuthority")
-
-        def productReference = routingInformationService.getProductReferences(DOCUMENT_CLASS, documentType, documentSubType1, documentSubType2, SERVICE_TYPE?.toUpperCase(), session.dataEntryModel, session.unitcode, session.username)
-
-        session.financial = productReference.financial
-        session.postApprovalRequirement = productReference.postApprovalRequirement
-        session.amountToCheck = productReference.amountToCheck
-        session.signingLimit = productReference.signingLimit
-        session.postingAuthority = productReference.postingAuthority
-		if("View Data Entry" == params.dataEntryButtonCaption){
-			session.dataEntryModel<<[viewMode:'viewMode']
-		}else{
-			session.dataEntryModel<<[viewMode:params.viewMode]
-			session.dataEntryModel<<[hasRoute:params.hasRoute]
-		}
-		//for Amla
-		def paymentsMade = chargesPaymentService.findAllPaymentsForAmla(params.tradeServiceId)
-		
-		List<Object> paymentList = new ArrayList<Map<String, Object>>();
-		paymentList.addAll(paymentsMade)
-
-		def count=0;
-
-		for(Object listahan:paymentList.listIterator()) {
-			
-			println paymentList.get(count).toString() + " aaaarrrrraaaaayyyyy " + count.toString()
-			
-			def paymentDetail = paymentList.get(count)
-			for(Map.Entry<String, String> laman: paymentDetail.entrySet()) {
-				
-				println laman.getKey() + " : " + laman.getValue()
-				
-				if(paymentDetail.get("PAYMENTINSTRUMENTTYPE").toString().equalsIgnoreCase("CASA")
-					&& paymentDetail.get("CURRENCY").toString().equalsIgnoreCase("PHP")){
-					session.dataEntryModel<<[amlaCasaFlag:"1",
-											 amlaCasaFlagPhp:"1",
-											 amlaCasaFlagAmount:paymentDetail.get("AMOUNT").toString()]
-				}
-				if(paymentDetail.get("PAYMENTINSTRUMENTTYPE").toString().equalsIgnoreCase("CASA")
-						&& !paymentDetail.get("CURRENCY").toString().equalsIgnoreCase("PHP")){
-						session.dataEntryModel<<[amlaCasaFlag:"1",
-												 amlaCasaFlagFx:"1",
-												 amlaCasaFlagAmount:paymentDetail.get("AMOUNT").toString(),
-												 amlaCasaFlagFxCurrency:paymentDetail.get("CURRENCY").toString()]
-				}
-						
-				if(paymentDetail.get("PAYMENTINSTRUMENTTYPE").toString().equalsIgnoreCase("REMITTANCE")
-					&& paymentDetail.get("CURRENCY").toString().equalsIgnoreCase("PHP")) {
-					session.dataEntryModel<<[amlaRemittanceFlag:"1",
-											 amlaRemittanceFlagPhp:"1",
-											 amlaRemittanceFlagAmount:paymentDetail.get("AMOUNT").toString()]
-				}
-				if(paymentDetail.get("PAYMENTINSTRUMENTTYPE").toString().equalsIgnoreCase("REMITTANCE")
-					&& !paymentDetail.get("CURRENCY").toString().equalsIgnoreCase("PHP")) {
-					session.dataEntryModel<<[amlaRemittanceFlag:"1",
-											 amlaRemittanceFlagFx:"1",
-											 amlaRemittanceFlagAmount:paymentDetail.get("AMOUNT").toString()]
-				}
-				
-				if(paymentDetail.get("PAYMENTINSTRUMENTTYPE").toString().equalsIgnoreCase("CASH")
-					&& paymentDetail.get("CURRENCY").toString().equalsIgnoreCase("PHP")) {
-					session.dataEntryModel<<[amlaCashFlag:"1",
-											 amlaCashFlagPhp:"1",
-											 amlaCashFlagAmount:paymentDetail.get("AMOUNT").toString()]
-				}
-				if(paymentDetail.get("PAYMENTINSTRUMENTTYPE").toString().equalsIgnoreCase("CASH")
-					&& !paymentDetail.get("CURRENCY").toString().equalsIgnoreCase("PHP")) {
-					session.dataEntryModel<<[amlaCashFlag:"1",
-											  amlaCashFlagFx:"1",
-											 amlaCashFlagAmount:paymentDetail.get("AMOUNT").toString()]
-				}
-					
-				if(paymentDetail.get("PAYMENTINSTRUMENTTYPE").toString().equalsIgnoreCase("CHECK")
-					&& paymentDetail.get("CURRENCY").toString().equalsIgnoreCase("PHP")) {
-					session.dataEntryModel<<[amlaCheckFlag:"1",
-											 amlaCheckFlagPhp:"1",
-											 amlaCheckFlagAmount:paymentDetail.get("AMOUNT").toString()]
-				}
-				if(paymentDetail.get("PAYMENTINSTRUMENTTYPE").toString().equalsIgnoreCase("CHECK")
-					&& !paymentDetail.get("CURRENCY").toString().equalsIgnoreCase("PHP")) {
-					session.dataEntryModel<<[amlaCheckFlag:"1",
-											 amlaCheckFlagFx:"1",
-											 amlaCheckFlagAmount:paymentDetail.get("AMOUNT").toString()]
-				}
-					//added Remittance as per discussion with maam juliet 02/20/2015
-					//same trancode with Check
-					if(paymentDetail.get("PAYMENTINSTRUMENTTYPE").toString().equalsIgnoreCase("REMITTANCE")
-						&& paymentDetail.get("CURRENCY").toString().equalsIgnoreCase("PHP")) {
-						session.dataEntryModel<<[amlaRemittanceFlag:"1",
-												 amlaRemittanceFlagPhp:"1",
-												 amlaRemittanceFlagAmount:paymentDetail.get("AMOUNT").toString()]
-
-					}
-					if(paymentDetail.get("PAYMENTINSTRUMENTTYPE").toString().equalsIgnoreCase("REMITTANCE")
-						&& !paymentDetail.get("CURRENCY").toString().equalsIgnoreCase("PHP")) {
-						session.dataEntryModel<<[amlaRemittanceFlag:"1",
-												 amlaRemittanceFlagFx:"1",
-												 amlaRemittanceFlagAmount:paymentDetail.get("AMOUNT").toString(),
-												 amlaRemittanceFlagFxCurrency:paymentDetail.get("CURRENCY").toString()]
-					}
-			}
-			count++
-		}
-        // chain to render page
-        chain(action:"viewAdjustment", model: session.dataEntryModel)
-	}
-	
-    def saveAdjustmentDataEntry() {
-        // get lc class and type
-        String documentType = params.documentType
-        String documentSubType1 = params.documentSubType1.toUpperCase()
-        String documentSubType2 = params.documentSubType2
-
-        //construct header title
-        String headerTitle = headerService.getDataEntryTitle(documentType, DOCUMENT_CLASS, documentSubType1, SERVICE_TYPE, documentSubType2)
-
-        // keep session model
-        session.dataEntryModel = [documentType: documentType, documentClass: DOCUMENT_CLASS, documentSubType1: documentSubType1, documentSubType2: documentSubType2, title: headerTitle, serviceType: SERVICE_TYPE, referenceType: REFERENCE_TYPE]
-
-        params.saveAs = "PENDING"
-
-        // trigger command
-        params.put("username", session.username)
-        params.put("unitcode", session.unitcode)
-        Map<String, Object> dataEntryMap = dataEntryService.saveDataEntry(params)
-
-        dataEntryMap.each{
-            if(!it.key.equals("referenceType") && !it.key.equals("serviceType") && !it.key.equals("documentClass")) {
-                session.dataEntryModel << it
-            }
-        }
-
-
-        def documentServiceRoute = routingInformationService.getNextMainApproverTsdInitiated(DOCUMENT_CLASS, documentType, documentSubType1, documentSubType2, REFERENCE_TYPE.toUpperCase(), SERVICE_TYPE?.toUpperCase(), session.username, session.userrole.id, session.unitcode, session.dataEntryModel, session.userLevel)
-        session.nextRoute = documentServiceRoute
-        session.dataEntryModel << routingInformationService.getMainApprovalMode(DOCUMENT_CLASS, documentType, documentSubType1, documentSubType2,SERVICE_TYPE?.toUpperCase(), session.dataEntryModel.approvers)
-		session.cancelBd=params.cancelBd
-		
-        // chain to render page
-        chain(action:"viewAdjustment", model:session.dataEntryModel)
-    }
-	
-	def updateAdjustmentDataEntry() {
-        // get lc class and type
-        String documentType = params.documentType
-        String documentSubType1 = params.documentSubType1.toUpperCase()
-        String documentSubType2 = params.documentSubType2
-
-        //construct header title
-        String headerTitle = headerService.getDataEntryTitle(documentType, DOCUMENT_CLASS, documentSubType1, SERVICE_TYPE, documentSubType2)
-
-        // keep session model
-        session.dataEntryModel = [documentType: documentType, documentClass: DOCUMENT_CLASS, documentSubType1: documentSubType1, documentSubType2: documentSubType2, title: headerTitle, serviceType: SERVICE_TYPE, referenceType: REFERENCE_TYPE]
-        session.dataEntryModel << [formName: tabUtilityService.getTabName(params.form)]
-
-        params.put("username", session.username)
-        params.put("unitcode", session.unitcode)
-        // trigger command
-        Map<String, Object> dataEntryMap = dataEntryService.updateDataEntry(params)
-
-        dataEntryMap.each{
-            if(!it.key.equals("referenceType") && !it.key.equals("serviceType") && !it.key.equals("documentClass")) {
-                session.dataEntryModel << it
-            }
-        }
-		session.cancelBd=params.cancelBd
-		//For AMLA
-		session.dataEntryModel<<[amlaCasaFlag:params.amlaCasaFlag,
-								amlaCashFlag:params.amlaCashFlag,
-								amlaCheckFlag:params.amlaCheckFlag,
-								amlaRemittanceFlag:params.amlaRemittanceFlag,
-								amlaCasaFlagPhp:params.amlaCasaFlagPhp,
-								amlaCashFlagPhp:params.amlaCashFlagPhp,
-								amlaCheckFlagPhp:params.amlaCheckFlagPhp,
-								amlaRemittanceFlagPhp:params.amlaRemittanceFlagPhp,
-								amlaCasaFlagAmount:params.amlaCasaFlagAmount,
-								amlaCashFlagAmount:params.amlaCashFlagAmount,
-								amlaCheckFlagAmount:params.amlaCheckFlagAmount,
-								amlaRemittanceFlagAmount:params.amlaRemittanceFlagAmount,
-								amlaCasaFlagFx:params.amlaCasaFlagFx,
-								amlaCashFlagFx:params.amlaCashFlagFx,
-								amlaCheckFlagFx:params.amlaCheckFlagFx,
-								amlaRemittanceFlagFx:params.amlaRemittanceFlagFx,
-								amlaRemittanceFlagFxCurrency:params.amlaRemittanceFlagFxCurrency,
-								amlaCasaFlagFxCurrency:params.amlaCasaFlagFxCurrency]
-		
-        // chain to render page
-        chain(action:"viewAdjustment", model:session.dataEntryModel)
-	}
-
-    def updateDataEntryStatus() {
-        // get lc class and type
-        String documentType = params.documentType
-        String documentSubType1 = params.documentSubType1.toUpperCase()
-        String documentSubType2 = params.documentSubType2
-
-        //construct header title
-        String headerTitle = headerService.getDataEntryTitle(documentType, DOCUMENT_CLASS, documentSubType1, SERVICE_TYPE, documentSubType2)
-
-        String statusAction = routingInformationService.getStatusAction(session.financial,
-                params.statusAction,
-                session.signingLimit,
-                session.amountToCheck,
-                session.dataEntryModel?.status,
-                session.postApprovalRequirement)
-
-        params.statusAction = statusAction
-
-        // keep session model
-        session.dataEntryModel = [documentType: documentType, documentClass: DOCUMENT_CLASS, documentSubType1: documentSubType1, documentSubType2: documentSubType2, title: headerTitle, serviceType: SERVICE_TYPE, referenceType: REFERENCE_TYPE]
-
-        params.put("username", session.username)
-        params.put("unitcode", session.unitcode)
-        // trigger command
-        dataEntryService.updateDataEntry(params)
-
-        // chain to render page
-        redirect(controller: "unactedTransactions", action: "viewUnacted")
-    }
-
-    def uploadDocument() {
-        def jsonData
-        try{
-            ////printlnrequest
-            MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request
-            MultipartFile uploadedFile = multiRequest.getFile("fileLocation")
-
-            String tradeServiceId = params?.tradeServiceId
-            println "tradeServiceId = ${tradeServiceId}"
-
-            params.filename = documentUploadingService.saveFile(uploadedFile, tradeServiceId)
-
-
-        } catch(Exception e){
-            e.printStackTrace()
-            ////printlne.message
-        }
-        //NOTE: We do this because of a conflict between FileUpload and MultipartHttpSevletRequest that is causing an error in the Spring Remoting
-        redirect(controller:'lcDataEntryAdjustment', action:'invokeUploadCommand',params:params)
-    }
-
-    def invokeUploadCommand(){
-        def jsonData
-
-        try{
-
-            session.dataEntryModel << [formName: tabUtilityService.getTabName(params.form)]
-
-            params.put("username", session.username)
-            params.put("unitcode", session.unitcode)
-            // trigger command
-            String temp =  dataEntryService.uploadAttachedToTradeService(params)
-            jsonData = [success: true]
-        } catch(Exception e){
-            e.printStackTrace()
-            ////printlne.message
-            jsonData = [success: false]
-        }
-        chain(action:"viewAdjustment", model: session.dataEntryModel)
-    }
-
-    def downloadFile() {
-
-        String id = params?.id
-        println "id = ${id}"
-
-        String tradeServiceId = params?.tradeServiceId
-        println "tradeServiceId = ${tradeServiceId}"
-
-       def returnValue = coreAPIService.dummySendQuery(params, "getFileDetails", "attachment/")
-
-        def fileName = returnValue?.details?.filename
-
-        if (fileName != null) {
-
-            File file = documentUploadingService.retrieveFile(fileName, tradeServiceId)
-
-            if (file.exists()) {
-                if(file.canRead()){
-                    response.setContentType("application/octet-stream")
-                    response.setHeader("Content-disposition", "filename=${file.name}")
-                    response.outputStream << file.bytes
-                    return
-                }
-            }
-
-        } else {
-            return
-        }
-    }
-
-    def deleteDocument() {
-
-        // sets statusAction to deleteDocument
-        params.statusAction = "deleteDocument"
-
-        // trigger command
-        // TODO do delete document
-
-        String id = params?.id
-        String tradeServiceId = params?.tradeServiceId
-
-        // println "id = ${id}"
-        // println "filename = ${filename}"
-        // println "tradeServiceId = ${tradeServiceId}"
-
-        def jsonData = [:]
-
-        try {
-
-            // Delete attachment record first in db, then delete the file. The reverse is dangerous.
-            def returnValue = coreAPIService.dummySendCommand(params, "delete", "attachment")
-
-            def deleted = null
-            if (returnValue.status == "ok") {
-                // If successful, delete the actual file
-                deleted = documentUploadingService.deleteFile(returnValue.details.filename, tradeServiceId)
-            } else if (returnValue.status == "error") {
-                throw new Exception(returnValue.error.code);
-            }
-
-            jsonData = [success: true]
-
-        } catch (Exception e) {
-            e.printStackTrace()
-            jsonData = [success: false, message: e.getMessage()]
-        }
-
-        render jsonData as JSON
-    }
-
-    def viewAttachments() {
-
-        def tradeServiceIdHolder =  params.tradeServiceIdHolder
-        ////println"tradeServiceIdHolder:" + tradeServiceIdHolder
-        def maxRows = params.int('rows') ?: 10
-        def currentPage = params.int('page') ?: 1
-        def rowOffset = currentPage == 1 ? 0 : (currentPage - 1) * maxRows
-
-        def mapList = dataEntryService.getAttachmentList( maxRows, rowOffset, currentPage, tradeServiceIdHolder)
-
-        def totalRows = mapList.totalRows
-        def numberOfPages = Math.ceil(totalRows / maxRows)
-        def results = dataEntryService.getGridFormattedAttachments(mapList.display, tradeServiceIdHolder)
-
-        def jsonData = [rows: results, page: currentPage, records: totalRows, total: numberOfPages]
-        render jsonData as JSON
-
-    }
-	
-}
diff --git a/grails-app/controllers/com/ucpb/tfsweb/main/FacilityController.groovy b/grails-app/controllers/com/ucpb/tfsweb/main/FacilityController.groovy
deleted file mode 100644
--- a/grails-app/controllers/com/ucpb/tfsweb/main/FacilityController.groovy
+++ /dev/null
@@ -1,228 +0,0 @@
-package com.ucpb.tfsweb.main
-
-import grails.converters.JSON
-import net.ipc.utils.DateUtils
-
-class FacilityController {
-
-    def facilityService
-
-    def static DM_TR_FACILITY_MAPPING = [
-            "USD" : "FTF",
-            "PHP" : "FD5"
-    ]
-
-    def static FX_TR_FACILITY_MAPPING = [
-            "USD" : "FTF",
-            "PHP" : "FFT"
-    ]
-
-    def static IB_FACILITY_MAPPING = [
-            "USD" : "FBF",
-            "PHP" : "FFB"
-    ]
-
-    def static DB_FACILITY_MAPPING = [
-            "USD" : "FBF",
-            "PHP" : "FDB"
-    ]
-
-    def static UA_FACILITY_MAPPING = [
-            "PHP" : "FD3",
-            "USD" : "F3F",
-            "SGD" : "F3S",
-            "EUR" : "F3U",
-            "JPY" : "F3Y",
-            "AUD" : "F3Z",
-            "GBP" : "F3G",
-            "HKD" : "F3K",
-            "CHF" : "F3I"
-
-    ]
-
-    def static DBP_FACILITY_MAPPING = [
-            "PHP" : "FDB",
-            "USD" : "FBF"
-    ]
-
-    def static EBP_FACILITY_MAPPING = [
-            "USD" : ["FBE", "FEB"]
-    ]
-
-
-
-
-    def searchFacility() {
-        println "searchFacility"
-        def maxRows = params.int('rows') ?: 10
-        def currentPage = params.int('page') ?: 1
-        def rowOffset = currentPage == 1 ? 0 : (currentPage - 1) * maxRows
-
-        Map<String, Object> mapList = facilityService.findAllFacilityByCifNumber(maxRows, rowOffset, currentPage, params)
-
-        def totalRows = mapList.totalRows
-        def numberOfPages = Math.ceil(totalRows / maxRows)
-        def results = facilityService.constructFacilityGrid(mapList.display)
-
-        def jsonData = [rows: results, page: currentPage, records: totalRows, total: numberOfPages]
-        render jsonData as JSON
-    }
-
-    //TODO: REFACTOR ME!
-    def getEarmarkingFacilities(){
-         def facilities = getFacilitiesByCurrency(params?.cifNumber,params?.mainCifNumber,params?.seqNo,'FCN');
-        render facilities as JSON;
-    }
-
-    def getEarmarkingFacilitiesSearch(){
-        def facilities = getFacilitiesByCurrencySearch(params?.cifNumber, params?.mainCifNumber, params?.seqNo, 'FCN');
-        render facilities as JSON;
-    }
-
-    def getEarmarkingFacilitiesForUaSearch(){
-        println "getEarmarkingFacilitiesForUaSearch"
-        def facilities = getFacilitiesByCurrencySearch(params?.cifNumber, params?.mainCifNumber, params?.seqNo, UA_FACILITY_MAPPING[params.currency]);
-        render facilities as JSON;
-    }
-
-    def searchForLoanFacilities(){
-        def facilities = getFacilitiesByCurrencyAndTypes(params?.cifNumber,params?.mainCifNumber,params.currency,params.seqNo,params.facilityType);
-        render facilities as JSON;
-    }
-
-    def getTrFacilities(){
-        def facilityType;
-        if("DOMESTIC".equalsIgnoreCase(params.documentType)){
-            facilityType = DM_TR_FACILITY_MAPPING[params.currency];
-        }else if ("FOREIGN".equalsIgnoreCase(params.documentType)){
-            facilityType = FX_TR_FACILITY_MAPPING[params.currency];
-        }
-
-        def facilities = getFacilitiesByCurrencyAndTypes(params?.cifNumber,
-				params?.mainCifNumber,
-				params.currency,
-                params.seqNo,
-                facilityType);
-        render facilities as JSON;
-    }
-
-    def getDbpFacilities(){
-        def facilities = getFacilitiesByCurrencyAndTypes(params?.cifNumber,
-				params?.mainCifNumber,
-                params.currency,
-                params.seqNo,
-                DBP_FACILITY_MAPPING[params.currency]);
-//        def facilities = getFacilitiesByCurrency(params?.cifNumber,params.currency,"FFT","FTF","FD5","F3F","F3S","F3U","F3Y","F3Z","F3G","F3K","F3I");
-        render facilities as JSON;
-    }
-
-    def getEbpFacilities(){
-        def facilities = getFacilitiesByCurrencyAndTypes(params?.cifNumber,
-				params?.mainCifNumber,
-                params.currency,
-                params.seqNo,
-                params.facilityType);
-        render facilities as JSON;
-    }
-
-    def getFacilityBalance(){
-        render (facilityService.getFacilityBalance(params.balanceQueryRequestId) as JSON);
-    }
-
-    def getFacilityBalanceRequest(){
-        render (facilityService.getFacilityBalanceRequest(Long.valueOf(params.balanceQueryRequestId?.toString()), session?.etsModel?.serviceInstructionId) as JSON);
-    }
-
-
-
-    def getIBFacilities(){
-        boolean isForeign = (session.etsModel?.documentType?.equals("FOREIGN") ||
-                             session.dataEntryModel?.documentType?.equals("FOREIGN") ||
-                             session.chargesModel?.documentType?.equals("FOREIGN")) ?
-                            true :
-                            false
-
-        def facilities = getFacilitiesByCurrencyAndTypes(params.cifNumber,
-				params?.mainCifNumber,
-                params.currency,
-                params.seqNo,
-                isForeign ? IB_FACILITY_MAPPING[params.currency] : DB_FACILITY_MAPPING[params.currency],
-        );
-        render facilities as JSON;
-    }
-
-    def getUAFacilities(){
-        def facilities = getFacilitiesByCurrencyAndTypes(params.cifNumber,
-				params?.mainCifNumber,
-                params.currency,
-                params.seqNo,
-                UA_FACILITY_MAPPING[params.currency]);
-        render facilities as JSON;
-    }
-
-    private getFacilitiesByCurrency(String cifNumber,String mainCifNumber,String seqNo,String... facilityTypes){
-        def maxRows = params.int('rows') ?: 10
-        def currentPage = params.int('page') ?: 1
-        def rowOffset = currentPage == 1 ? 0 : (currentPage - 1) * maxRows
-
-        List<Map<String,Object>> facilities = facilityService.getFacilities(cifNumber,mainCifNumber,seqNo,facilityTypes);
-
-//        def results = facilityService.constructFacilityGrid(facilities,maxRows,rowOffset,currentPage);
-//        def jsonData = [rows : results, page : params.int('page') ?: 1, records:  facilities.size(), total : Math.ceil(facilities.size()/params.int('rows') ?: 10) ]
-        return facilityService.constructFacilityGrid(facilities,maxRows,rowOffset,currentPage);
-    }
-
-    private getFacilitiesByCurrencySearch(String cifNumber,
-										  String mainCifNumber,
-                                          String seqNo,
-                                          String... facilityTypes){
-        def maxRows = params.int('rows') ?: 10
-        def currentPage = params.int('page') ?: 1
-        def rowOffset = currentPage == 1 ? 0 : (currentPage - 1) * maxRows
-
-        List<Map<String,Object>> facilities = facilityService.getFacilitiesSearch(cifNumber,
-																			mainCifNumber,
-                                                                            seqNo,
-                                                                            facilityTypes);
-//        def results = facilityService.constructFacilityGrid(facilities,maxRows,rowOffset,currentPage);
-//        def jsonData = [rows : results, page : params.int('page') ?: 1, records:  facilities.size(), total : Math.ceil(facilities.size()/params.int('rows') ?: 10) ]
-        return facilityService.constructFacilityGrid(facilities,maxRows,rowOffset,currentPage);
-    }
-
-    private getFacilitiesByCurrencyAndTypes(String cifNumber,String mainCifNumber,String currency,String seqNo,String... facilityTypes){
-        def maxRows = params.int('rows') ?: 10
-        def currentPage = params.int('page') ?: 1
-        def rowOffset = currentPage == 1 ? 0 : (currentPage - 1) * maxRows
-
-        List<Map<String,Object>> facilities = facilityService.getFacilitiesByCifCurrencyAndTypes(cifNumber,
-				mainCifNumber,
-                currency,
-                seqNo ?: '',
-                facilityTypes);
-
-//        def results = facilityService.constructFacilityGrid(facilities,maxRows,rowOffset,currentPage);
-//        def jsonData = [rows : results, page : params.int('page') ?: 1, records:  facilities.size(), total : Math.ceil(facilities.size()/params.int('rows') ?: 10) ]
-        println 'facilityTypes ' + facilityTypes
-        return facilityService.constructFacilityGrid(facilities,maxRows,rowOffset,currentPage);
-    }
-
-    def searchTrLines() {
-
-        String trLines = facilityService.findTrLines(params)
-        render([trLines: trLines] as JSON)
-    }
-
-    def requestFacilityBalance(){
-        println params.facilityType
-        render facilityService.insertFacilityBalanceQuery(params.facilityId,params.facilityType,params.cifNumber) as JSON;
-    }
-
-    def inquireFacilityBalance(){
-        render facilityService.inquireFacilityBalance(session?.etsModel?.serviceInstructionId ?: params.serviceInstructionId) as JSON;
-    }
-
-
-    def getCurrentDate() {
-        render([currentSystemDate: DateUtils.shortDateFormat(new Date())] as JSON)
-    }
-}
diff --git a/grails-app/services/com/ucpb/tfsweb/main/FacilityService.groovy b/grails-app/services/com/ucpb/tfsweb/main/FacilityService.groovy
deleted file mode 100644
--- a/grails-app/services/com/ucpb/tfsweb/main/FacilityService.groovy
+++ /dev/null
@@ -1,163 +0,0 @@
-package com.ucpb.tfsweb.main
-
-import net.ipc.utils.NumberUtils
-import java.text.SimpleDateFormat
-import java.util.List;
-import java.util.Map;
-
-import org.apache.commons.lang.StringUtils
-
-/*
-	 (revision)
-	 SCR/ER Number: ER# 20170109-040
-	 SCR/ER Description: Transaction allowed to be created even the facility is expired
-	 [Revised by:] Jesse James Joson
-	 [Date revised:] 1/17/2017
-	 Program [Revision] Details: Check the expiry date of the facility before allowing to amend LC
-	 Member Type: Groovy
-	 Project: WEB
-	 Project Name: FacilityService.groovy
-*/
-
-class FacilityService {
-
-    def queryService
-    
-    def facilityFinder = com.ucpb.tfs.application.query.interfaces.FacilityService.class;
-    def coreAPIService;
-
-
-    Map<String, Object> findAllFacilityByCifNumber(maxRows, rowOffset, currentPage, params) {
-        String methodName = "getFacilitiesByCifNumber"
-
-        Map<String, Object> param = [cifNumber: params.cifNumber ?: ""]
-
-        List<Map<String, Object>> queryResult = queryService.executeQuery(facilityFinder, methodName, param)
-
-        Integer toIndex = ((currentPage * maxRows) < queryResult?.size()) ? (currentPage * maxRows) : queryResult?.size()
-        return [display: queryResult?.subList(rowOffset, toIndex), totalRows: queryResult?.size()]        
-    }
-
-    public List<Map<String,Object>> findAllFacilitiesByCifNumberAndType(String cifNumber, String facilityType){
-        return queryService.executeQuery(facilityFinder,"getFacilitiesByCifNumberAndType",[cifNumber : cifNumber ?: '', type : facilityType ?: '']);
-    }
-
-    def constructFacilityGrid(sourceList,maxRows, rowOffset, currentPage) {
-        Integer toIndex = ((currentPage * maxRows) < sourceList?.size()) ? (currentPage * maxRows) : sourceList?.size()
-
-        def display = sourceList?.subList(rowOffset, toIndex)?.collect {
-//            String date = convertDateString(it.EXPIRY_DATE.toString(),"MMddyy","MM/dd/yy");
-            [
-             id: it.FACILITY_REF_NUMBER,
-//             id: it.FACILITY_ID,
-                    cell:[
-                            it.FACILITY_ID,
-                            convertDateString(it.EXPIRY_DATE.toString(),"MMddyy","MM/dd/yyyy"), //it.AFEXP6
-                            it.FACILITY_CURRENCY ?: "",
-                            it.FACILITY_TYPE,
-                            it.FACILITY_REF_NUMBER,
-                            it.BALANCE_INQUIRY_ID
-                    ]
-            ]
-        }
-
-        int totalRows = sourceList?.size() ?: 0//display?.size() ?: 0
-
-        return [rows : display,
-            page : currentPage,
-            records : totalRows,
-            total : Math.ceil(totalRows / maxRows)
-        ]
-    }
-
-    private String convertDateString(String sourceDateString,String sourceFormat,String outputFormat){
-        SimpleDateFormat sourceDateFormat = new SimpleDateFormat(sourceFormat);
-        SimpleDateFormat outputDateFormat = new SimpleDateFormat(outputFormat);
-        return outputDateFormat.format(sourceDateFormat.parse(StringUtils.leftPad(sourceDateString,6,"0")));
-    }
-
-    String findTrLines(params) {
-		String methodName = "getFacilitiesByCifNumberAndFacilityTypes"
-
-        String[] facilityTypes = ['CLS', 'FFT', 'FTF']
-
-        Map<String, Object> param = [cifNumber: params.cifNumber ?: "",
-				mainCifNumber: params.mainCifNumber ?: "",
-				seqNo: "",
-                facilityTypes: facilityTypes]
-
-        List<Map<String, Object>> queryResult = queryService.executeQuery(facilityFinder, methodName, param)
-        def trLine = []
-
-        queryResult.each {
-            trLine << it.FACILITY_TYPE+it.FACILITY_ID
-        }
-
-        params.cifNumber
-        ////printlntrLine
-        return trLine?.toString()?.replace("[","")?.replace("]","")
-    }
-
-    def getFacilities(String cifNumber, String mainCifNumber, String seqNo, String... facilityTypes){
-        println "facilityService.getFacilities : facilityTypes >> " + facilityTypes
-        return queryService.executeQuery(facilityFinder, "getFacilitiesByCifNumberAndFacilityTypes", [cifNumber: cifNumber ?: '',
-				mainCifNumber: mainCifNumber ?: '',
-                seqNo: seqNo ?: '',
-                facilityTypes: facilityTypes ?: '']);
-    }
-
-    def getFacilitiesSearch(String cifNumber,
-							String mainCifNumber,
-                            String seqNo,
-                            String... facilityTypes){
-        println "facilityService.getFacilitiesSearch : facilityTypes >> " + facilityTypes
-        return queryService.executeQuery(facilityFinder, "getFacilitiesByCifNumberAndFacilityTypesSearch", [cifNumber: cifNumber,
-				mainCifNumber: mainCifNumber ?: '',
-                seqNo: seqNo,
-                facilityTypes: facilityTypes]);
-    }
-
-    def getFacilitiesByCifCurrencyAndTypes(String cifNumber,String mainCifNumber,String currency,String seqNo, String... facilityTypes){
-        println "\n\nfacilityService.getFacilitiesByCifCurrencyAndTypes : facilityTypes >> " + facilityTypes
-        println "cifNumber >> " + cifNumber
-        println "mainCifNumber >> " + mainCifNumber
-        println "currency >> " + currency
-        println "seqNo >> " + seqNo
-
-        return queryService.executeQuery(facilityFinder, "getFacilitiesByCifCurrencyAndFacilityTypes",
-                [cifNumber: cifNumber,
-                 mainCifNumber: mainCifNumber,
-                 currency : currency,
-                 seqNo : seqNo ?: '',
-                 facilityTypes: facilityTypes]);
-    }
-
-    def getFacilityBalance(String balanceQueryId){
-        List<Map<String,Object>> result = queryService.executeQuery(facilityFinder, "getFacilityBalance", [transactionSequenceNumber: balanceQueryId ? Long.valueOf(balanceQueryId) : ""]);
-        if(!result.isEmpty()){
-            return result.get(0);
-        }
-        return new HashMap<String,Object>();
-    }
-
-    def insertFacilityBalanceQuery(String facilityId, String facilityType, String cifNumber){
-        def parameters = [facilityId : facilityId, facilityType : facilityType, cifNumber: cifNumber];
-
-        def result = coreAPIService.dummySendCommand(parameters, "insertBalance","facility/");
-        return result
-    }
-
-    def getFacilityBalanceRequest(Long transactionNumber, String etsNumber){
-        return coreAPIService.dummySendCommand([transactionSequenceNumber: transactionNumber, etsNumber: etsNumber],"getBalance","facility/");
-    }
-
-    def inquireFacilityBalance(String etsNumber){
-        return coreAPIService.dummySendCommand([etsNumber : etsNumber],"inquireBalance","facility/");
-    }
-
-	def getFacilitiesByCifAndFacility(String cifNumber, String facilityRefNo, String facilityType, String facilityId) {
-		return queryService.executeQuery(facilityFinder,"getFacilitiesByCifAndFacility",[cifNumber : cifNumber , facilityRefNo : facilityRefNo , facilityType : facilityType , facilityId : facilityId]);
-			
-	}
-
-}
